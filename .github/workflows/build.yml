name: Build

on:
 - workflow_dispatch
 - push

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux2014_x86_64
    strategy:
      matrix:
        python: ["3.9"]

    steps:
      - uses: actions/checkout@v4
      - name: set interpreter path
        run: |
          echo "INTERPRETER_PATH=cp${{ matrix.python-version }}-cp${{ matrix.python }}" >> $GITHUB_ENV
      - name: install wheel package
        run: |
          /opt/python/$INTERPRETER_PATH/bin/pip install --upgrade --no-cache-dir pip
          /opt/python/$INTERPRETER_PATH/bin/pip install --no-cache-dir wheel
      - uses: actions/checkout@v4
        with:
          repository: 'opencv/opencv-python'
          ref: '80'
          path: 'opencv'
          submodules: true
      - name: install build requirements
        run: |
          /opt/python/$INTERPRETER_PATH/bin/pip install --no-cache-dir scikit-build numpy
      - name: get values
        # The build will not automatically find them.
        run: |
          /opt/python/$INTERPRETER_PATH/bin/python -c "import sysconfig; print(f\"PYTHON3_INCLUDE_DIR={sysconfig.get_path('include')}\")" >> $GITHUB_ENV
          /opt/python/$INTERPRETER_PATH/bin/python -c "import sysconfig; print(f\"PYTHON3_LIBRARY={sysconfig.get_config_var('LIBDIR')}\")" >> $GITHUB_ENV
      - name: build
        env:
          CMAKE_BUILD_PARALLEL_LEVEL: 4
          BUILD_OPENCV_PYTHON3: 1
          BUILD_OPENCV_PYTHON2: 0
          WITH_IPP: 0
          WITH_ITT: 0
          WITH_V4L: 0
          WITH_GSTREAMER: 0
          WITH_FFMPEG: 0
          OPENCV_ENABLE_NONFREE: 0
          ENABLE_JAVA: 0
          ENABLE_CONTRIB: 0
          ENABLE_GUI: 0
          PYTHON3_EXECUTABLE: "/opt/python/$INTERPRETER_PATH/bin/python"
          # The Intel dependencies (especially IPP) disallow reverse engineering in their EULA,
          # which might lead to incompatibilities with LGPL libraries.
          # Although https://github.com/OpenHFT/Chronicle-Map/issues/141 seems to indicate otherwise.
          # Therefore just exclude them for now.
          # 
          # Reference: Go to
          #    https://github.com/opencv/opencv_3rdparty/blob/ippicv/master_20230330/ippicv/ippicv_2021.8_lnx_intel64_20230330_general.tgz
          # and download and unpack the file. Inside it, you will find a file named `EULA.txt` which states:
          #
          # > No reverse engineering, decompilation, or disassembly of the Software is
          # > permitted, nor any modification or alteration of the Software or its operation
          # > at any time, including during execution.
          #
          # Modules: https://docs.opencv.org/4.x/
          # Flags: https://docs.opencv.org/4.x/db/d05/tutorial_config_reference.html
          # `gapi` requires `videoio`.
          CMAKE_ARGS: "-DWITH_IPP=OFF -DWITH_ITT=OFF -DBUILD_opencv_highgui=OFF -DWITH_V4L=OFF -DWITH_FFMPEG=OFF -DWITH_GSTREAMER=OFF"
        run: |
          cd opencv
          /opt/python/$INTERPRETER_PATH/bin/python setup.py bdist_wheel --verbose
          # /opt/python/$INTERPRETER_PATH/bin/python -m pip wheel --wheel-dir dist --verbose .
          ls -l dist
          find dist/ -type f -iregex ".*-[manylinux|linux].*\.whl"
          find dist/ -type f -iregex ".*-[manylinux|linux].*\.whl" -exec bash -c 'f="$0"; auditwheel repair "$f" -w "$(dirname "$f")" --plat "manylinux2014_x86_64" || { echo "Repairing wheels failed."; auditwheel show "$f"; }' {} \;
      - run: ls -l opencv/dist
      - name: upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: "wheels_${{ matrix.python }}"
          path: |
            opencv/dist/*.whl
